import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import React, { useState, useEffect } from "react";
import axios from "axios";

export default function Home() {
  const [spinner, setspinner] = useState(false);
  const [ocrresult, setocrresult] = useState([]);
  const [imageNames, setimageNames] = useState([]);
  const [imgBuffers, setimgBuffers] = useState([]);
  const [imgSizes, setimgSizes] = useState([]);
  const [imgDimensions, setimgDimensions] = useState([]);
  const [imgModels, setimgModels] = useState([]);
  const [paddlecheck, setpaddlecheck] = useState(false);
  const [awscheck, setawscheck] = useState(false);

  async function layerupload() {
    setspinner(true);

    try {
      const data = event.target.files;

      console.log("paddlecheck :", paddlecheck);
      console.log("awscheck :", awscheck);
      if (!paddlecheck && !awscheck) {
        alert("Please select OCR Model");
      } else if (data.length > 0) {
        for (let i = 0; i < data.length; i++) {
          const form_data = new FormData();
          form_data.append("files", data[i]);

          await axios({
            method: "post",
            // url: `${process.env.NEXT_PUBLIC_PYTHON_URL}/python/invoice-parsing/test`,
            url: `${process.env.NEXT_PUBLIC_PYTHON_URL}/ocr/generate-result`,
            data: form_data, // you are sending body instead
            headers: {
              "Content-Type": "multipart/form-data",
            },
          })
            .then(async (res) => {
              const totalPayload = res.data.result.data;

              let imgBuffer_dummy = [];
              let imageNames_dummy = [];
              let ocrresult_dummy = [];
              let imgSizes_dummy = [];
              let imgDimensions_dummy = [];
              let imgModels_dummy = [];

              for (let i = 0; i < totalPayload.length; i++) {
                ocrresult_dummy.push(
                  JSON.stringify(totalPayload[i]["OCR_data"], undefined, 4)
                );

                console.log("totalPayload[i] :", totalPayload[i]);
                imageNames_dummy.push(totalPayload[i]["Image_name"]);
                imgSizes_dummy.push(totalPayload[i]["Image_size"]);
                imgDimensions_dummy.push(
                  `${totalPayload[i]["Image_dimensions"][0]},${totalPayload[i]["Image_dimensions"][1]}`
                );
                imgModels_dummy.push(totalPayload[i]["Image_model"]);

                const url = `data:image/jpeg;base64,${totalPayload[i]["Image_buffer"]}`;
                let blob_url = "";
                await fetch(url).then(async (res) => {
                  const blob = await res.blob();
                  blob_url = await URL.createObjectURL(blob);
                });

                imgBuffer_dummy.push(blob_url);
              }

              // set images
              setimgBuffers(imgBuffer_dummy);
              // set ocr data
              setocrresult(ocrresult_dummy);
              // set img name data
              setimageNames(imageNames_dummy);
              // set img size
              setimgSizes(imgSizes_dummy);
              // set img dimension
              setimgDimensions(imgDimensions_dummy);
              // set img model
              setimgModels(imgModels_dummy);
            })
            .catch((err) => {
              alert(err);
            });
        }
      }
    } catch (err) {
      alert(err);
    }

    setspinner(false);
  }

  // download JSON
  function downloadObjectAsJson(exportObj, exportName) {
    var dataStr =
      "data:text/json;charset=utf-8," +
      encodeURIComponent(JSON.stringify(exportObj));
    var downloadAnchorNode = document.createElement("a");
    downloadAnchorNode.setAttribute("href", dataStr);
    downloadAnchorNode.setAttribute("download", exportName + ".json");
    document.body.appendChild(downloadAnchorNode); // required for firefox
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>OCR Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
          crossorigin="anonymous"
        ></link>
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Upload <a href="#">Document</a>
        </h1>
        <br></br>

        <h6 class="text-center">
          Extract data accurately from any image or pdf document
        </h6>
        <h6 class="text-center">in any layout without any manual setup</h6>

        <br></br>
        <br></br>

        {/* model checkboxes */}
        <div>
          <h7>Apply OCR Models : &nbsp;</h7>
          <div class="form-check form-check-inline">
            <input
              class="form-check-input"
              type="checkbox"
              id="inlineCheckbox1"
              value="PaddleOCR"
              onChange={(e) => {
                if (e.target.checked) {
                  console.log("setpaddlecheck :");
                  setpaddlecheck(true);
                } else {
                  setpaddlecheck(false);
                }
              }}
            />
            <label class="form-check-label" for="inlineCheckbox1">
              PaddleOCR
            </label>
          </div>
          <div class="form-check form-check-inline">
            <input
              class="form-check-input"
              type="checkbox"
              id="inlineCheckbox2"
              value="AWS_Textract"
              onChange={(e) => {
                if (e.target.checked) {
                  setawscheck(true);
                } else {
                  setawscheck(false);
                }
              }}
            />
            <label class="form-check-label" for="inlineCheckbox2">
              PyTesseract
            </label>
          </div>
          {/* <div class="form-check form-check-inline">
            <input
              class="form-check-input"
              type="checkbox"
              id="inlineCheckbox3"
              value="option3"
              disabled
            />
            <label class="form-check-label" for="inlineCheckbox3">
              3 (disabled)
            </label>
          </div> */}
        </div>

        {/* file upload code is here  */}
        <div class="text-center">
          <label for="formFile" class="form-label"></label>
          <input
            class="form-control"
            type="file"
            id="formFile"
            // accept="image/*,application/pdf,.HEIC"
            accept="image/jpeg,jpg"
            onChange={layerupload}
          />
        </div>

        <br></br>

        {/* loader code is here  */}
        {spinner ? (
          <div class="display-flex">
            <div class="spinner-grow text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-secondary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-success" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-danger" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-warning" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-info" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <div class="spinner-grow text-dark" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        ) : (
          ""
        )}

        <br></br>

        {/* result section is here  */}
        {ocrresult.length > 0
          ? ocrresult.map((item, index) => {
              return (
                <div class="row w-100 border p-3">
                  <div class="col-lg-1 col-md-1 col-sm-2">
                    {/* <h1>test</h1> */}
                  </div>
                  <div class="col-lg-4 col-md-4 col-sm-8">
                    <img
                      src={
                        imgBuffers.length > 0
                          ? imgBuffers[index]
                          : "loading.jpg"
                      }
                      class="img-fluid rounded-start"
                    ></img>
                  </div>
                  <div class="col-lg-4 col-md-4 col-sm-8">
                    {/* <h5 class="text-center">OCR Result</h5> */}

                    <textarea
                      class="w-100 h-100 p-3"
                      placeholder="OCR result will be shown here..."
                      value={ocrresult.length > 0 ? ocrresult[index] : ""}
                    ></textarea>
                  </div>
                  <div class="col-lg-3 col-md-3 col-sm-2">
                    {/* <h1>test</h1> */}
                    <h7 class="text-center">
                      <strong>Image Name</strong> :{" "}
                      {imageNames.length > 0 ? imageNames[index] : ""}
                    </h7>
                    <br></br>
                    <br></br>
                    <h7 class="text-center">
                      <strong>Image Size (Bytes) </strong>:{" "}
                      {imgSizes.length > 0 ? imgSizes[index] : ""}
                    </h7>
                    <br></br>
                    <br></br>
                    <h7 class="text-center">
                      <strong>Image Dimensions (ht,wd)</strong> :{" "}
                      {imgDimensions.length > 0 ? imgDimensions[index] : ""}
                    </h7>
                    <br></br>
                    <br></br>
                    <h7 class="text-center">
                      <strong>Image OCR Model</strong> :{" "}
                      {imgModels.length > 0 ? imgModels[index] : ""}
                    </h7>
                    <br></br>
                    <br></br>
                    <button
                      class="btn btn-primary text-center mx-auto"
                      onClick={() => {
                        downloadObjectAsJson(
                          JSON.parse(ocrresult[index], undefined, 4),
                          "test"
                        );
                      }}
                    >
                      Download JSON
                    </button>
                  </div>
                </div>
              );
            })
          : ""}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
